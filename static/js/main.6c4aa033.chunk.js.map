{"version":3,"sources":["App.js","index.js"],"names":["getEthereumObject","window","ethereum","findMetaMaskAccount","a","console","log","request","method","accounts","length","account","error","message","App","useState","currentAccount","setCurrentAccount","totalWaveCount","setTotalWaveCount","allWaves","setAllWaves","generating","setGenerating","setMessage","generateButtonText","setGenerateButtonText","contractABI","abi","useEffect","then","checkIfWalletIsConnected","getAllWaves","wavePortalContract","onNewWave","from","timestamp","prevState","address","Date","signer","ethers","providers","Web3Provider","getSigner","Contract","process","on","off","connectWallet","wave","provider","getTotalWaves","count","toNumber","gasLimit","waveTxt","hash","wait","waves","waveCleaned","map","element","waver","className","placeholder","value","onChange","event","target","onClick","disabled","id","index","key","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6c4aa033.chunk.js","sourcesContent":["import * as React from \"react\";\n// This is the library that allows us to talk to our contract from our frontend.\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport dotenv from \"dotenv\";\nimport abi from \"./utils/WavePortal.json\";\n\nconst getEthereumObject = () => window.ethereum;\n\n/*\n * This function returns the first linked account found.\n * If there is no account linked, it will return null.\n */\nconst findMetaMaskAccount = async () => {\n  try {\n    const ethereum = getEthereumObject();\n\n    if (!ethereum) {\n      console.log(\"Make sure to have metamask installed!\");\n      return null;\n    }\n    console.log(\"Ethereum object: \", ethereum);\n\n    // Checking to see if the user has an ethereum account using special method called \"eth_accounts\" \n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n    console.log(\"List of all accounts: \", accounts);\n\n    // User can have multiple accounts in their wallet so in that case we will be picking the first one.\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      return account;\n    } else {\n      console.log(\"No authorized account found.\");\n      return null;\n    }\n\n  } catch (error) {\n    console.error(error.message);\n    return null;\n  }\n};\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalWaveCount, setTotalWaveCount] = useState(0);\n  const [allWaves, setAllWaves] = useState([]);\n  const [generating, setGenerating] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [generateButtonText, setGenerateButtonText] = useState(\"Wave at me!\");\n\n  const contractABI = abi.abi;\n\n  /*\n   * The passed callback function will be run when the page loads.\n   * More technically, when the App component \"mounts\".\n   */\n  useEffect(() => {\n    findMetaMaskAccount().then((account) => {\n      if (account !== null) {\n        setCurrentAccount(account);\n      }\n    });\n    checkIfWalletIsConnected();\n  }, []);\n\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n    if (ethereum) {\n      console.log(\"We have the ethereum object\", ethereum);\n      await getAllWaves();\n    } else {\n      console.log(\"Make sure you have MetaMask installed!\");\n      return;\n    }\n  }\n\n  /*\n   * Here we are listening for the NewWave \n  * */\n  useEffect(() => {\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves(prevState => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    };\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      wavePortalContract = new ethers.Contract(process.env.REACT_APP_CONTRACT_ADDRESS, contractABI, signer);\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n\n\n  // useEffect(() => {\n  //   if (currentAccount) {\n  //     const waveCount = async () => {\n  //       const { ethereum } = window;\n  //       if (ethereum) {\n  //         const provider = new ethers.providers.Web3Provider(ethereum);\n  //         const signer = provider.getSigner();\n  //         // 0x96eae7C84270217a8348f6FEbf1B8d438D4DB61F\n  //         const wavePortalContract = new ethers.Contract(process.env.REACT_APP_CONTRACT_ADDRESS, contractABI, signer);\n\n  //         let count = await wavePortalContract.getTotalWaves();\n  //         let array = await wavePortalContract.wave_results;\n  //         console.log(\"Array: \", array);\n  //         setTotalWaveCount(count.toNumber());\n  //       }\n  //     }\n  //     waveCount().catch(console.error);\n  //   }\n  // }, [contractABI, currentAccount])\n\n  /*\n   * This function will allow us to connect to the user's wallet!\n   */\n  const connectWallet = async () => {\n    try {\n      const ethereum = getEthereumObject();\n      if (!ethereum) {\n        console.log(\"Please download MetaMask!\");\n        return;\n      }\n\n      const account = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected with the account: \", account[0]);\n      setCurrentAccount(account[0])\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n\n  /*\n  * Description: This function is used to make a transaction onto the blockchain.\n  * Blockchain address: 0xBb632C19840F8625677f7c94eD685a4eC1fD723A\n  * */\n  const wave = async () => {\n    console.log(\"Trying to wave!\");\n    if (message !== \"\") {\n      try {\n        setGenerating(true);\n        setGenerateButtonText(\"Generating...\")\n\n        const { ethereum } = window;\n\n        if (ethereum) {\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const wavePortalContract = new ethers.Contract(process.env.REACT_APP_CONTRACT_ADDRESS, contractABI, signer);\n\n          let count = await wavePortalContract.getTotalWaves();\n          console.log(\"Total number of waves: \", count.toNumber());\n\n          // Execute the actual waves from your smart contract.\n          const waveTxt = await wavePortalContract.wave(message, { gasLimit: 300000 });\n          console.log(\"Mining...:\", waveTxt.hash);\n\n          await waveTxt.wait();\n          console.log(\"Mined -- \", waveTxt.hash);\n\n          count = await wavePortalContract.getTotalWaves();\n          console.log(\"Retrieved total wave count...\", count.toNumber());\n\n          setMessage(\"\");\n          setTotalWaveCount(count.toNumber());\n          // getAllWaves();\n        }\n        else {\n          console.log(\"Ethereum object doesn't exist!\");\n        }\n\n        setGenerating(false);\n        setGenerateButtonText(\"Wave at me!\")\n      } catch (error) {\n        console.error(error.message);\n        setGenerateButtonText(\"Encountered an error!\")\n      }\n    } else {\n      setGenerating(true);\n      setGenerateButtonText(\"Please provide a message!\")\n    }\n\n  }\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(process.env.REACT_APP_CONTRACT_ADDRESS, contractABI, signer);\n\n        const totalWaveCount = await wavePortalContract.getTotalWaves();\n        setTotalWaveCount(totalWaveCount.toNumber());\n\n        const waves = await wavePortalContract.getAllWaves();\n        let waveCleaned = waves.map(element => {\n          return {\n            address: element.waver,\n            timestamp: new Date(element.timestamp * 1000),\n            message: element.message\n          }\n        });\n\n        setAllWaves(waveCleaned);\n      }\n      else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n\n  const messageUpdated = (event) => {\n    if (generating && message !== \"\") {\n      setGenerating(false);\n      setGenerateButtonText(\"Wave at me!\");\n    }\n\n    setMessage(event.target.value);\n  }\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          👋 Hey there!\n        </div>\n\n        <div className=\"bio\">\n          I am Vaibhav, and I am real life humanoid 😁. Thats pretty cool right? Connect your Ethereum wallet and wave at me!\n        </div>\n\n        {!currentAccount ? (\n          <button className=\"waveButton connectWallet\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        ) : (\n          <div className=\"wavesContainer\">\n            <h3>Total # of Waves: {totalWaveCount}</h3>\n\n            <textarea className=\"prompt-box\" placeholder=\"Your message...\" value={message} onChange={messageUpdated} />\n\n            <button className={generating ? \"waveButton generating\" : \"waveButton\"} onClick={wave} disabled={generating}>\n              {generateButtonText}\n            </button>\n          </div>\n        )}\n\n        <h1 id=\"allWaveTitle\">History:</h1>\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} className=\"allWaves\">\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>)\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}