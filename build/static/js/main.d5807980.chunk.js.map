{"version":3,"sources":["App.js","index.js"],"names":["getEthereumObject","window","ethereum","findMetaMaskAccount","a","console","log","request","method","accounts","length","account","error","message","App","useState","currentAccount","setCurrentAccount","totalWaveCount","setTotalWaveCount","contractABI","abi","useEffect","then","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","process","getTotalWaves","count","wave_results","array","toNumber","waveCount","catch","connectWallet","wave","waveTxt","hash","wait","className","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5807980.chunk.js","sourcesContent":["import * as React from \"react\";\n// This is the library that allows us to talk to our contract from our frontend.\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport dotenv from \"dotenv\";\nimport abi from \"./utils/WavePortal.json\";\n\nconst getEthereumObject = () => window.ethereum;\n\n/*\n * This function returns the first linked account found.\n * If there is no account linked, it will return null.\n */\nconst findMetaMaskAccount = async () => {\n  try {\n    const ethereum = getEthereumObject();\n\n    if (!ethereum) {\n      console.log(\"Make sure to have metamask installed!\");\n      return null;\n    }\n    console.log(\"Ethereum object: \", ethereum);\n\n    // Checking to see if the user has an ethereum account using special method called \"eth_accounts\" \n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n    console.log(\"List of all accounts: \", accounts);\n\n    // User can have multiple accounts in their wallet so in that case we will be picking the first one.\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      return account;\n    } else {\n      console.log(\"No authorized account found.\");\n      return null;\n    }\n\n  } catch (error) {\n    console.error(error.message);\n    return null;\n  }\n};\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalWaveCount, setTotalWaveCount] = useState(0);\n\n  const contractABI = abi.abi;\n\n  /*\n   * The passed callback function will be run when the page loads.\n   * More technically, when the App component \"mounts\".\n   */\n  useEffect(() => {\n    findMetaMaskAccount().then((account) => {\n      if (account !== null) {\n        setCurrentAccount(account);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    if (currentAccount) {\n      const waveCount = async () => {\n        const { ethereum } = window;\n        if (ethereum) {\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          // 0x88c8469F62b1Fa375550E1E3B1cFdE7292A49957\n          const wavePortalContract = new ethers.Contract(process.env.REACT_APP_CONTRACT_ADDRESS, contractABI, signer);\n\n          let count = await wavePortalContract.getTotalWaves();\n          let array = await wavePortalContract.wave_results;\n          console.log(\"Array: \", array);\n          setTotalWaveCount(count.toNumber());\n        }\n      }\n      waveCount().catch(console.error);\n    }\n  }, [contractABI, currentAccount])\n\n  /*\n   * This function will allow us to connect to the user's wallet!\n   */\n  const connectWallet = async () => {\n    try {\n      const ethereum = getEthereumObject();\n      if (!ethereum) {\n        console.log(\"Please download MetaMask!\");\n        return;\n      }\n\n      const account = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected with the account: \", account[0]);\n      setCurrentAccount(account[0])\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n\n  /*\n  * Description: This function is used to make a transaction onto the blockchain.\n  * Blockchain address: 0x88c8469F62b1Fa375550E1E3B1cFdE7292A49957\n  * */\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(process.env.REACT_APP_CONTRACT_ADDRESS, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Total number of waves: \", count.toNumber());\n\n        // Execute the actual waves from your smart contract.\n        const waveTxt = await wavePortalContract.wave();\n        console.log(\"Mining...:\", waveTxt.hash);\n\n        await waveTxt.wait();\n        console.log(\"Mined -- \", waveTxt.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        setTotalWaveCount(count);\n      }\n      else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          üëã Hey there!\n        </div>\n\n        <div className=\"bio\">\n          I am Vaibhav, and I am real life humanoid üòÅ. Thats pretty cool right? Connect your Ethereum wallet and wave at me!\n        </div>\n\n        {!currentAccount ? (\n          <button className=\"waveButton connectWallet\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        ) : (\n          <div className=\"wavesContainer\">\n            <h3>Total # of Waves: {totalWaveCount}</h3>\n            <button className=\"waveButton\" onClick={wave}>\n              Wave at Me\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// Add the address to the results array\n// if (results[msg.sender].user == address(0)) {\n//     wave_results.push(msg.sender);\n// }\n\n// // Convert to msg.sender to string\n// results[msg.sender].user = msg.sender;\n// results[msg.sender].numberOfWaves += 1;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}